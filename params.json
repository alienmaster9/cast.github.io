{"name":"cast.github.io","tagline":"castsite","body":"\r\n<!--\r\n> 2013, Muaz Khan - wwww.MuazKhan.com\r\n> MIT License     - www.WebRTC-Experiment.com/licence\r\n> Documentation   - github.com/muaz-khan/WebRTC-Experiment/tree/master/video-broadcasting\r\n-->\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <title>WebRTC Broadcasting ® Muaz Khan</title>\r\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n        <meta charset=\"utf-8\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\r\n        <link rel=\"author\" type=\"text/html\" href=\"http://google.com/+MuazKhan\">\r\n        <meta name=\"author\" content=\"Muaz Khan\">\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\r\n        <link rel=\"stylesheet\" href=\"style.css\">\r\n        \r\n        <style>\r\n            audio, video {\r\n                -moz-transition: all 1s ease;\r\n                -ms-transition: all 1s ease;\r\n                \r\n                -o-transition: all 1s ease;\r\n                -webkit-transition: all 1s ease;\r\n                transition: all 1s ease;\r\n                vertical-align: top;\r\n                width: 100%;\r\n            }\r\n\r\n            input {\r\n                border: 1px solid #d9d9d9;\r\n                border-radius: 1px;\r\n                font-size: 2em;\r\n                margin: .2em;\r\n                width: 30%;\r\n            }\r\n\r\n            select {\r\n                border: 1px solid #d9d9d9;\r\n                border-radius: 1px;\r\n                height: 50px;\r\n                margin-left: 1em;\r\n                margin-right: -12px;\r\n                padding: 1.1em;\r\n                vertical-align: 6px;\r\n                width: 18%;\r\n            }\r\n\r\n            .setup {\r\n                border-bottom-left-radius: 0;\r\n                border-top-left-radius: 0;\r\n                font-size: 102%;\r\n                height: 47px;\r\n                margin-left: -9px;\r\n                margin-top: 8px;\r\n                position: absolute;\r\n            }\r\n\r\n            p { padding: 1em; }\r\n\r\n            li {\r\n                border-bottom: 1px solid rgb(189, 189, 189);\r\n                border-left: 1px solid rgb(189, 189, 189);\r\n                padding: .5em;\r\n            }\r\n        </style>\r\n        <script>\r\n            document.createElement('article');\r\n            document.createElement('footer');\r\n        </script>\r\n        \r\n        <!-- scripts used for broadcasting -->\r\n        <script src=\"firebase.js\"> </script>\r\n        <script src=\"RTCPeerConnection-v1.5.js\"> </script>\r\n        <script src=\"webrtc-broadcasting/broadcast.js\"> </script>\r\n    </head>\r\n\r\n    <body>\r\n        <article>\r\n            <header style=\"text-align: center;\">\r\n                <h1>\r\n                    <a href=\"https://www.webrtc-experiment.com/\">WebRTC</a> \r\n                    <a href=\"https://github.com/muaz-khan/WebRTC-Experiment/tree/master/webrtc-broadcasting\" target=\"_blank\">Broadcasting</a>\r\n                    ® \r\n                    <a href=\"https://github.com/muaz-khan\" target=\"_blank\">Muaz Khan</a>\r\n                </h1>            \r\n                <p>\r\n                    <span>Copyright © 2013</span>\r\n                    <a href=\"https://github.com/muaz-khan\" target=\"_blank\">Muaz Khan</a><span>&lt;</span><a href=\"http://twitter.com/muazkh\" target=\"_blank\">@muazkh</a><span>&gt;</span>\r\n                    »\r\n                    <a href=\"http://twitter.com/WebRTCWeb\" target=\"_blank\" title=\"Twitter profile for WebRTC Experiments\">@WebRTC Experiments</a>\r\n                    »\r\n                    <a href=\"https://plus.google.com/106306286430656356034/posts\" target=\"_blank\" title=\"Google+ page for WebRTC Experiments\">Google+</a>\r\n                    »\r\n                    <a href=\"https://github.com/muaz-khan/WebRTC-Experiment/issues\" target=\"_blank\">What's New?</a>\r\n                </p>\r\n            </header>\r\n\r\n            <div class=\"github-stargazers\"></div>\r\n\r\n            <section class=\"plusone-gplus\">\r\n                <div class=\"g-plusone\" data-href=\"https://www.webrtc-experiment.com/\"></div>\r\n            </section>\r\n        \r\n            <!-- just copy this <section> and next script -->\r\n            <section class=\"experiment\">                \r\n                <section>\r\n                    <select id=\"broadcasting-option\">\r\n                        <option>Audio + Video</option>\r\n                        <option>Only Audio</option>\r\n                        <option>Screen</option>\r\n                    </select>\r\n                    <input type=\"text\" id=\"broadcast-name\">\r\n                    <button id=\"setup-new-broadcast\" class=\"setup\">Setup New Broadcast</button>\r\n                </section>\r\n                \r\n                <!-- list of all available broadcasting rooms -->\r\n                <table style=\"width: 100%;\" id=\"rooms-list\"></table>\r\n                \r\n                <!-- local/remote videos container -->\r\n                <div id=\"videos-container\"></div>\r\n            </section>\r\n        \r\n            <script>\r\n                // Muaz Khan     - https://github.com/muaz-khan\r\n                // MIT License   - https://www.webrtc-experiment.com/licence/\r\n                // Documentation - https://github.com/muaz-khan/WebRTC-Experiment/tree/master/webrtc-broadcasting\r\n\r\n                var config = {\r\n                    openSocket: function(config) {\r\n                        var channel = config.channel || location.href.replace( /\\/|:|#|%|\\.|\\[|\\]/g , '');\r\n                        var socket = new Firebase('https://chat.firebaseIO.com/' + channel);\r\n                        socket.channel = channel;\r\n                        socket.on(\"child_added\", function(data) {\r\n                            config.onmessage && config.onmessage(data.val());\r\n                        });\r\n                        socket.send = function(data) {\r\n                            this.push(data);\r\n                        };\r\n                        config.onopen && setTimeout(config.onopen, 1);\r\n                        socket.onDisconnect().remove();\r\n                        return socket;\r\n                    },\r\n                    onRemoteStream: function(htmlElement) {\r\n                        htmlElement.setAttribute('controls', true);\r\n                        videosContainer.insertBefore(htmlElement, videosContainer.firstChild);\r\n                        htmlElement.play();\r\n                        rotateInCircle(htmlElement);\r\n                    },\r\n                    onRoomFound: function(room) {\r\n                        var alreadyExist = document.querySelector('button[data-broadcaster=\"' + room.broadcaster + '\"]');\r\n                        if (alreadyExist) return;\r\n\r\n                        if (typeof roomsList === 'undefined') roomsList = document.body;\r\n\r\n                        var tr = document.createElement('tr');\r\n                        tr.innerHTML = '<td><strong>' + room.roomName + '</strong> is broadcasting his media!</td>' +\r\n                            '<td><button class=\"join\">Join</button></td>';\r\n                        roomsList.insertBefore(tr, roomsList.firstChild);\r\n\r\n                        var joinRoomButton = tr.querySelector('.join');\r\n                        joinRoomButton.setAttribute('data-broadcaster', room.broadcaster);\r\n                        joinRoomButton.setAttribute('data-roomToken', room.broadcaster);\r\n                        joinRoomButton.onclick = function() {\r\n                            this.disabled = true;\r\n\r\n                            var broadcaster = this.getAttribute('data-broadcaster');\r\n                            var roomToken = this.getAttribute('data-roomToken');\r\n                            broadcastUI.joinRoom({\r\n                                roomToken: roomToken,\r\n                                joinUser: broadcaster\r\n                            });\r\n                            hideUnnecessaryStuff();\r\n                        };\r\n                    },\r\n                    onNewParticipant: function(numberOfViewers) {\r\n                        document.title = 'Viewers: ' + numberOfViewers;\r\n                    }\r\n                };\r\n\r\n                function setupNewBroadcastButtonClickHandler() {\r\n                    document.getElementById('broadcast-name').disabled = true;\r\n                    document.getElementById('setup-new-broadcast').disabled = true;\r\n\r\n                    captureUserMedia(function() {\r\n                        var shared = 'video';\r\n                        if (window.option == 'Only Audio') shared = 'audio';\r\n                        if (window.option == 'Screen') shared = 'screen';\r\n                        broadcastUI.createRoom({\r\n                            roomName: (document.getElementById('broadcast-name') || { }).value || 'Anonymous',\r\n                            isAudio: shared === 'audio'\r\n                        });\r\n                    });\r\n                    hideUnnecessaryStuff();\r\n                }\r\n\r\n                function captureUserMedia(callback) {\r\n                    var constraints = null;\r\n                    window.option = broadcastingOption ? broadcastingOption.value : '';\r\n                    if (option === 'Only Audio') {\r\n                        constraints = {\r\n                            audio: true,\r\n                            video: false\r\n                        };\r\n                    }\r\n                    if (option === 'Screen') {\r\n                        var video_constraints = {\r\n                            mandatory: {\r\n                                chromeMediaSource: 'screen'\r\n                            },\r\n                            optional: []\r\n                        };\r\n                        constraints = {\r\n                            audio: false,\r\n                            video: video_constraints\r\n                        };\r\n                    }\r\n\r\n                    var htmlElement = document.createElement(option === 'Only Audio' ? 'audio' : 'video');\r\n                    htmlElement.setAttribute('autoplay', true);\r\n                    htmlElement.setAttribute('controls', true);\r\n                    videosContainer.insertBefore(htmlElement, videosContainer.firstChild);\r\n\r\n                    var mediaConfig = {\r\n                        video: htmlElement,\r\n                        onsuccess: function(stream) {\r\n                            config.attachStream = stream;\r\n                            callback && callback();\r\n\r\n                            htmlElement.setAttribute('muted', true);\r\n                            rotateInCircle(htmlElement);\r\n                        },\r\n                        onerror: function() {\r\n                            if (option === 'Only Audio') alert('unable to get access to your microphone');\r\n                            else if (option === 'Screen') {\r\n                                if (location.protocol === 'http:') alert('Please test this WebRTC experiment on HTTPS.');\r\n                                else alert('Screen capturing is either denied or not supported. Are you enabled flag: \"Enable screen capture support in getUserMedia\"?');\r\n                            } else alert('unable to get access to your webcam');\r\n                        }\r\n                    };\r\n                    if (constraints) mediaConfig.constraints = constraints;\r\n                    getUserMedia(mediaConfig);\r\n                }\r\n\r\n                var broadcastUI = broadcast(config);\r\n\r\n                /* UI specific */\r\n                var videosContainer = document.getElementById('videos-container') || document.body;\r\n                var setupNewBroadcast = document.getElementById('setup-new-broadcast');\r\n                var roomsList = document.getElementById('rooms-list');\r\n\r\n                var broadcastingOption = document.getElementById('broadcasting-option');\r\n\r\n                if (setupNewBroadcast) setupNewBroadcast.onclick = setupNewBroadcastButtonClickHandler;\r\n\r\n                function hideUnnecessaryStuff() {\r\n                    var visibleElements = document.getElementsByClassName('visible'),\r\n                        length = visibleElements.length;\r\n                    for (var i = 0; i < length; i++) {\r\n                        visibleElements[i].style.display = 'none';\r\n                    }\r\n                }\r\n\r\n                function rotateInCircle(video) {\r\n                    video.style[navigator.mozGetUserMedia ? 'transform' : '-webkit-transform'] = 'rotate(0deg)';\r\n                    setTimeout(function() {\r\n                        video.style[navigator.mozGetUserMedia ? 'transform' : '-webkit-transform'] = 'rotate(360deg)';\r\n                    }, 1000);\r\n                }\r\n\r\n            </script>\r\n            \r\n            <section class=\"experiment\">\r\n                <ol>\r\n                    <li>Mesh networking model is implemented to open multiple interconnected peer connections</li>\r\n                    <li>Maximum peer connections limit is <strong>256</strong> (on chrome)</li>\r\n                </ol>\r\n            </section>\r\n        \r\n            <section class=\"experiment own-widgets latest-commits\">\r\n                <h2 class=\"header\" id=\"updates\" style=\"color: red; padding-bottom: .1em;\"><a href=\"https://github.com/muaz-khan/WebRTC-Experiment/commits/master\" target=\"_blank\">Latest Updates</a></h2>\r\n                <div id=\"github-commits\"></div>\r\n            </section>\r\n        \r\n            <section class=\"experiment\">\r\n                <h2 class=\"header\" id=\"feedback\">Feedback</h2>\r\n                <div>\r\n                    <textarea id=\"message\" style=\"border: 1px solid rgb(189, 189, 189); height: 8em; margin: .2em; outline: none; resize: vertical; width: 98%;\" placeholder=\"Have any message? Suggestions or something went wrong?\"></textarea>\r\n                </div>\r\n                <button id=\"send-message\" style=\"font-size: 1em;\">Send Message</button><small style=\"margin-left: 1em;\">Enter your email too; if you want \"direct\" reply!</small>\r\n            </section>\r\n            \r\n            <section class=\"experiment\">\r\n                <h2 class=\"header\">How it works?</h2>\r\n                <p>\r\n                    It is one-way broadcasting; media stream is attached only by the broadcaster.\r\n                </p>\r\n                <p>\r\n                    It means that, if 10 people are watching your one-way broadcasted audio/video stream; on your system:\r\n                </p>\r\n                <ol>\r\n                    <li>10 RTP ports are opened to send video upward i.e. outgoing video</li>\r\n                    <li>10 RTP ports are opened to send audio upward i.e. outgoing audio</li>\r\n                </ol>\r\n                <p>\r\n                    And on participants system:\r\n                </p>\r\n                <ol>\r\n                    <li>10 RTP ports are opened to receive video i.e. incoming video</li>\r\n                    <li>10 RTP ports are opened to receive audio i.e. incoming audio</li>\r\n                </ol>\r\n                <p>\r\n                    Maximum bandwidth used by each video RTP port (media-track) is about 1MB. You're streaming audio and video tracks. You must be careful when streaming video over more than one peers. If you're broadcasting audio/video over 10 peers; it means that 20MB bandwidth is required on your system to stream-up (broadcast/transmit) your video. Otherwise; you'll face connection lost; CPU usage issues; and obviously audio-lost/noise/echo issues.\r\n                </p>\r\n                <p>\r\n                    You can handle such things using \"b=AS\" (application specific bandwidth) session description parameter values to deliver a little bit low quality video.\r\n                </p>\r\n                <pre>\r\n// removing existing bandwidth lines\r\nsdp = sdp.replace( /b=AS([^\\r\\n]+\\r\\n)/g , '');\r\n\r\n// setting \"outgoing\" audio RTP port's bandwidth to \"50kbit/s\"\r\nsdp = sdp.replace( /a=mid:audio\\r\\n/g , 'a=mid:audio\\r\\nb=AS:50\\r\\n');\r\n\r\n// setting \"outgoing\" video RTP port's bandwidth to \"256kbit/s\"\r\nsdp = sdp.replace( /a=mid:video\\r\\n/g , 'a=mid:video\\r\\nb=AS:256\\r\\n');\r\n</pre>\r\n                <p>\r\n                    Possible issues:</p>\r\n                <ol>\r\n                    <li>Blurry video experience</li>\r\n                    <li>Unclear voice and audio lost</li>\r\n                    <li>Bandwidth issues / slow streaming / CPU overwhelming</li>\r\n                </ol>\r\n                <p>Solution? Obviously a media server!</p>\r\n            </section>\r\n        </article>\r\n        <footer>\r\n            <p>\r\n                <a href=\"https://www.webrtc-experiment.com/\">WebRTC Experiments</a>\r\n                ©\r\n                <a href=\"https://plus.google.com/100325991024054712503\" rel=\"author\" target=\"_blank\">Muaz Khan</a>, <span>2013 </span>»\r\n                <a href=\"mailto:muazkh@gmail.com\" target=\"_blank\">Email</a>»\r\n                <a href=\"http://twitter.com/muazkh\" target=\"_blank\">@muazkh</a>»\r\n                <a href=\"https://github.com/muaz-khan\" target=\"_blank\">Github</a>\r\n            </p>\r\n        </footer>\r\n    \r\n        <!-- commits.js is useless for you! -->\r\n        <script src=\"https://www.webrtc-experiment.com/commits.js\" async> </script>\r\n    </body>\r\n</html>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}